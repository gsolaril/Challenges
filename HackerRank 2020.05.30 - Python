{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Pr√°ctica HackerRank 2020.05.30 - PY","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNNwZ4rJ8FeWhmdq/4CFdZt"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"zr03t57wnBM1","colab_type":"text"},"source":["## <a href = \"https://www.hackerrank.com/challenges/kangaroo/problem\">Kangaroo</a>"]},{"cell_type":"code","metadata":{"id":"37z4H3Dam7C7","colab_type":"code","colab":{}},"source":["def kangaroo(x1 = 0, v1 = 3, x2 = 4, v2 = 2):\n","    max_num = 10000\n","    assert((x1 < max_num) and (v1 < max_num) \\\n","       and (x2 < max_num) and (v2 < max_num))\n","    for step in range(max_num):\n","        print(x1, x2)\n","        x1, x2 = x1 + v1, x2 + v2\n","        if (x1 == x2):\n","            print(x1, x2)\n","            return \"YES\"\n","    return \"NO\"\n","\n","kangaroo()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"a3jAlTiIvd5I","colab_type":"text"},"source":["## <a href = \"https://leetcode.com/problems/missing-number/\">MPSO</a>\n","<i>Find the minimum positive integer outside (not included in) the input array.</i>\n","<br><u>Constraints</u>:\n","<ul><li>\"<code>len(arr) <= 100000</code>\"</li>\n","<li>\"<code>min(arr) >= -1000000</code>\"</li>\n","<li>\"<code>max(arr) <= +1000000</code>\"</li></ul>"]},{"cell_type":"code","metadata":{"id":"L3S84e0evdMQ","colab_type":"code","outputId":"73a8ecf3-456b-4737-8c33-394d753934bd","executionInfo":{"status":"ok","timestamp":1590864038415,"user_tz":180,"elapsed":884,"user":{"displayName":"Gaston Solari Loudet","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMe8DCLrK5M3taBiwi_Ej1i4UYc3sfM5F9I2ivCw=s64","userId":"00924400757036101595"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["import numpy\n","def MPSO(array):\n","    array = sorted(array)\n","    assert((len(array) <= 100000) \\\n","     and (min(array) >= -1000000) \\\n","     and (max(array) <= +1000000))\n","    tail = min(array)\n","    array = numpy.array(array) # a1 = [tail, tail + 1, tail + 3, ..., tail + x]\n","    array2 = array - tail      # a2 = a1 - tail = [0, 0 + 1, 0 + 3, ..., x]\n","    array3 = numpy.arange(start = 0, stop = len(array2), step = 1)\n","    # a3 = [0, 1, 2, ..., x - \"cant de ints que faltan\"]\n","    mask = array3[array2 != array3]\n","    # mask = [ 0 != 0 , 1 != 1 , 3 != 2 , ... ] <--- 3 != 2 (!!) 2\n","    # mask = [ 0, 0, 1, ... ] ---> indice 2\n","    return  (tail + array3[mask][0])\n","    # en ej: tail + 2 ---> el 1er int que me faltaba\n","\n","print(\"MPSO('[5, 6, 7, 9]') =\", MPSO([5, 6, 7, 9]))\n","x = numpy.arange(25, 74, 1) # tail = 25\n","x = numpy.delete(x, 29) # Le borro la posicion 29 (\"n = 25 + 29 = 54\")\n","print(\"MPSO('numeros entre 25 y 74, excepto el 54') =\", MPSO(x))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["MPSO('[5, 6, 7, 9]') = 8\n","MPSO('numeros entre 25 y 74, excepto el 54') = 54\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UrJFGbBk7CTL","colab_type":"text"},"source":["<i>Mismo ejercicio de arriba, resuelto por Daniel Uranga.</i>"]},{"cell_type":"code","metadata":{"id":"HomHEhMBzScP","colab_type":"code","colab":{}},"source":["def MPSO2(A):\n","    A_set = set(A)\n","    max_plus_one = max(max(A_set) + 1, 1)\n","    for i in range(1, max_plus_one):\n","        if i not in A_set:\n","            return i\n","        \n","    return max_plus_one"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YIaScZ307Jaz","colab_type":"text"},"source":["#### <u>Comparemos...</u>"]},{"cell_type":"code","metadata":{"id":"Paug5HAa4luN","colab_type":"code","outputId":"93533736-6b5f-4647-d9f2-796913d4cdbd","executionInfo":{"status":"ok","timestamp":1590865619956,"user_tz":180,"elapsed":950,"user":{"displayName":"Gaston Solari Loudet","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMe8DCLrK5M3taBiwi_Ej1i4UYc3sfM5F9I2ivCw=s64","userId":"00924400757036101595"}},"colab":{"base_uri":"https://localhost:8080/","height":352}},"source":["import time\n","t1 = time.time(); MPSO(x)\n","t2 = time.time(); MPSO2(x)\n","t3 = time.time()\n","\n","T_MPSO  = []\n","T_MPSO2 = []\n","lengths = list(range(100, 1000, 100))\n","for length in lengths:\n","    tail = 128\n","    x = numpy.arange(tail, tail + length)\n","    # Elimino el numero de la mitad\n","    x = numpy.delete(x, length//2)\n","    t1 = time.time(); MPSO(x)\n","    t2 = time.time(); MPSO2(x)\n","    t3 = time.time()\n","    T_MPSO.append(1000*(t2 - t1))\n","    T_MPSO2.append(1000*(t3 - t2))\n","\n","import matplotlib.pyplot as plt\n","plt.figure(figsize = (14, 5))\n","plt.style.use(\"dark_background\")\n","plt.plot(lengths, T_MPSO, label = \"Gaston\")\n","plt.plot(lengths, T_MPSO2, label = \"Daniel\")\n","plt.xlabel(\"Lengths\") ; plt.ylabel(\"msec\")\n","plt.gca().legend()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7fc2febd7320>"]},"metadata":{"tags":[]},"execution_count":120},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1008x360 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"m4t_jZ4q7BZd","colab_type":"text"},"source":["## <a href = \"https://leetcode.com/problems/single-number/\">Only once</a>"]},{"cell_type":"code","metadata":{"id":"3xpDekGHFeqM","colab_type":"code","outputId":"4615edf1-201e-4f72-b0ed-1bf7939bb5aa","executionInfo":{"status":"ok","timestamp":1590867940860,"user_tz":180,"elapsed":648,"user":{"displayName":"Gaston Solari Loudet","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjMe8DCLrK5M3taBiwi_Ej1i4UYc3sfM5F9I2ivCw=s64","userId":"00924400757036101595"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["def only_once(array):\n","    arrset = set(array)\n","    once = []\n","    for n in arrset:\n","        if (array.count(n) == 1):\n","            once.append(n)\n","    return once\n","\n","only_once([1, 2, 3, 2, 3, 6])"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 6]"]},"metadata":{"tags":[]},"execution_count":121}]}]}